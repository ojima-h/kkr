# Autogenerated from a Treetop grammar. Edits may be lost.


module Search
  include Treetop::Runtime

  def root
    @root ||= :exp
  end

  module Exp0
    def op
      elements[0]
    end

    def t
      elements[2]
    end
  end

  module Exp1
    def compose(note, b)
      if op.text_value == 'and'
        b and t.validate(note)
      else
        b or t.validate(note)
      end
    end
  end

  module Exp2
    def tf
      elements[0]
    end

    def ts
      elements[1]
    end
  end

  module Exp3
    def validate(note)
      ts.elements.inject(tf.validate(note)) {|acc,e|
        e.compose(note, acc)
      }
    end
  end

  def _nt_exp
    start_index = index
    if node_cache[:exp].has_key?(index)
      cached = node_cache[:exp][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_term
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        i4 = index
        if has_terminal?('and', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 3))
          @index += 3
        else
          terminal_parse_failure('and')
          r5 = nil
        end
        if r5
          r4 = r5
        else
          if has_terminal?('or', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('or')
            r6 = nil
          end
          if r6
            r4 = r6
          else
            @index = i4
            r4 = nil
          end
        end
        s3 << r4
        if r4
          s7, i7 = [], index
          loop do
            if has_terminal?(' ', false, index)
              r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(' ')
              r8 = nil
            end
            if r8
              s7 << r8
            else
              break
            end
          end
          if s7.empty?
            @index = i7
            r7 = nil
          else
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
          end
          s3 << r7
          if r7
            r9 = _nt_term
            s3 << r9
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(Exp0)
          r3.extend(Exp1)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Exp2)
      r0.extend(Exp3)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:exp][start_index] = r0

    r0
  end

  module Term0
    def t
      elements[2]
    end
  end

  module Term1
    def validate(note)
      not t.validate(note)
    end
  end

  module Term2
    def exp
      elements[1]
    end

  end

  module Term3
    def validate(note)
      exp.validate(note)
    end
  end

  def _nt_term
    start_index = index
    if node_cache[:term].has_key?(index)
      cached = node_cache[:term][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('not', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure('not')
      r2 = nil
    end
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        if has_terminal?(' ', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(' ')
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
      if r3
        r5 = _nt_term
        s1 << r5
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Term0)
      r1.extend(Term1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i6, s6 = index, []
      if has_terminal?('(', false, index)
        r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('(')
        r7 = nil
      end
      s6 << r7
      if r7
        r8 = _nt_exp
        s6 << r8
        if r8
          if has_terminal?(')', false, index)
            r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(')')
            r9 = nil
          end
          s6 << r9
          if r9
            s10, i10 = [], index
            loop do
              if has_terminal?(' ', false, index)
                r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(' ')
                r11 = nil
              end
              if r11
                s10 << r11
              else
                break
              end
            end
            r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
            s6 << r10
          end
        end
      end
      if s6.last
        r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
        r6.extend(Term2)
        r6.extend(Term3)
      else
        @index = i6
        r6 = nil
      end
      if r6
        r0 = r6
      else
        r12 = _nt_label
        if r12
          r0 = r12
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:term][start_index] = r0

    r0
  end

  module Label0
    def name
      elements[1]
    end

    def cond
      elements[3]
    end

    def value
      elements[5]
    end

  end

  module Label1
    def validate(note)
      l = note.links.find { |link|
        link.tag.name == name.text_value
      }
      if l
         if cond.text_value == '<'
           l.value.to_i < value.text_value.to_i
         elsif cond.text_value == '='
           l.value == value.text_value
         elsif cond.text_value == '>'
           l.value.to_i > value.text_value.to_i
         elsif cond.text_value == '~'
           l.value.match (value.text_value)
         end
       else
         false
       end
     end
  end

  module Label2
    def name
      elements[1]
    end

  end

  module Label3
    def validate(note)
      note.tags.any? { |tag|
        tag.name == name.text_value
      }
    end
  end

  def _nt_label
    start_index = index
    if node_cache[:label].has_key?(index)
      cached = node_cache[:label][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?(':', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure(':')
      r2 = nil
    end
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        if has_terminal?('\G[^ ]', true, index)
          r4 = true
          @index += 1
        else
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
      if r3
        s5, i5 = [], index
        loop do
          if has_terminal?(' ', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(' ')
            r6 = nil
          end
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s1 << r5
        if r5
          i7 = index
          if has_terminal?('<', false, index)
            r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('<')
            r8 = nil
          end
          if r8
            r7 = r8
          else
            if has_terminal?('=', false, index)
              r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('=')
              r9 = nil
            end
            if r9
              r7 = r9
            else
              if has_terminal?('>', false, index)
                r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('>')
                r10 = nil
              end
              if r10
                r7 = r10
              else
                if has_terminal?('~', false, index)
                  r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure('~')
                  r11 = nil
                end
                if r11
                  r7 = r11
                else
                  @index = i7
                  r7 = nil
                end
              end
            end
          end
          s1 << r7
          if r7
            s12, i12 = [], index
            loop do
              if has_terminal?(' ', false, index)
                r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(' ')
                r13 = nil
              end
              if r13
                s12 << r13
              else
                break
              end
            end
            r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
            s1 << r12
            if r12
              s14, i14 = [], index
              loop do
                if has_terminal?('\G[^ ]', true, index)
                  r15 = true
                  @index += 1
                else
                  r15 = nil
                end
                if r15
                  s14 << r15
                else
                  break
                end
              end
              if s14.empty?
                @index = i14
                r14 = nil
              else
                r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
              end
              s1 << r14
              if r14
                s16, i16 = [], index
                loop do
                  if has_terminal?(' ', false, index)
                    r17 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(' ')
                    r17 = nil
                  end
                  if r17
                    s16 << r17
                  else
                    break
                  end
                end
                r16 = instantiate_node(SyntaxNode,input, i16...index, s16)
                s1 << r16
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Label0)
      r1.extend(Label1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i18, s18 = index, []
      if has_terminal?(':', false, index)
        r19 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(':')
        r19 = nil
      end
      s18 << r19
      if r19
        s20, i20 = [], index
        loop do
          if has_terminal?('\G[^ ]', true, index)
            r21 = true
            @index += 1
          else
            r21 = nil
          end
          if r21
            s20 << r21
          else
            break
          end
        end
        if s20.empty?
          @index = i20
          r20 = nil
        else
          r20 = instantiate_node(SyntaxNode,input, i20...index, s20)
        end
        s18 << r20
        if r20
          s22, i22 = [], index
          loop do
            if has_terminal?(' ', false, index)
              r23 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(' ')
              r23 = nil
            end
            if r23
              s22 << r23
            else
              break
            end
          end
          r22 = instantiate_node(SyntaxNode,input, i22...index, s22)
          s18 << r22
        end
      end
      if s18.last
        r18 = instantiate_node(SyntaxNode,input, i18...index, s18)
        r18.extend(Label2)
        r18.extend(Label3)
      else
        @index = i18
        r18 = nil
      end
      if r18
        r0 = r18
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:label][start_index] = r0

    r0
  end

end

class SearchParser < Treetop::Runtime::CompiledParser
  include Search
end



