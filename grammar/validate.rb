# Autogenerated from a Treetop grammar. Edits may be lost.


require 'treetop-utils'

module Validate
  include Treetop::Runtime

  def root
    @root ||= :expression
  end

  module Expression0
    def term
      elements[2]
    end
  end

  module Expression1
    def term
      elements[2]
    end
  end

  module Expression2
    def base
      elements[0]
    end

    def ops
      elements[2]
    end
  end

  def _nt_expression
    start_index = index
    if node_cache[:expression].has_key?(index)
      cached = node_cache[:expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_term
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        if has_terminal?(' ', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(' ')
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s1 << r3
      if r3
        s5, i5 = [], index
        loop do
          i6 = index
          s7, i7 = [], index
          loop do
            i8, s8 = index, []
            if has_terminal?('&', false, index)
              r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('&')
              r9 = nil
            end
            s8 << r9
            if r9
              s10, i10 = [], index
              loop do
                if has_terminal?(' ', false, index)
                  r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(' ')
                  r11 = nil
                end
                if r11
                  s10 << r11
                else
                  break
                end
              end
              r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
              s8 << r10
              if r10
                r12 = _nt_term
                s8 << r12
              end
            end
            if s8.last
              r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
              r8.extend(Expression0)
            else
              @index = i8
              r8 = nil
            end
            if r8
              s7 << r8
            else
              break
            end
          end
          if s7.empty?
            @index = i7
            r7 = nil
          else
            r7 = instantiate_node(Expression::Meet,input, i7...index, s7)
          end
          if r7
            r6 = r7
          else
            s13, i13 = [], index
            loop do
              i14, s14 = index, []
              if has_terminal?('|', false, index)
                r15 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('|')
                r15 = nil
              end
              s14 << r15
              if r15
                s16, i16 = [], index
                loop do
                  if has_terminal?(' ', false, index)
                    r17 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(' ')
                    r17 = nil
                  end
                  if r17
                    s16 << r17
                  else
                    break
                  end
                end
                r16 = instantiate_node(SyntaxNode,input, i16...index, s16)
                s14 << r16
                if r16
                  r18 = _nt_term
                  s14 << r18
                end
              end
              if s14.last
                r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
                r14.extend(Expression1)
              else
                @index = i14
                r14 = nil
              end
              if r14
                s13 << r14
              else
                break
              end
            end
            if s13.empty?
              @index = i13
              r13 = nil
            else
              r13 = instantiate_node(Expression::Join,input, i13...index, s13)
            end
            if r13
              r6 = r13
            else
              @index = i6
              r6 = nil
            end
          end
          if r6
            s5 << r6
          else
            break
          end
        end
        if s5.empty?
          @index = i5
          r5 = nil
        else
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        end
        s1 << r5
      end
    end
    if s1.last
      r1 = instantiate_node(Expression,input, i1...index, s1)
      r1.extend(Expression2)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r19 = _nt_term
      if r19
        r0 = r19
      else
        r20 = _nt_atom
        if r20
          r0 = r20
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:expression][start_index] = r0

    r0
  end

  module Term0
    def term
      elements[2]
    end
  end

  module Term1
    def expression
      elements[2]
    end

  end

  def _nt_term
    start_index = index
    if node_cache[:term].has_key?(index)
      cached = node_cache[:term][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('!', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('!')
      r2 = nil
    end
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        if has_terminal?(' ', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(' ')
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s1 << r3
      if r3
        r5 = _nt_term
        s1 << r5
      end
    end
    if s1.last
      r1 = instantiate_node(Negation,input, i1...index, s1)
      r1.extend(Term0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i6, s6 = index, []
      if has_terminal?('(', false, index)
        r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('(')
        r7 = nil
      end
      s6 << r7
      if r7
        s8, i8 = [], index
        loop do
          if has_terminal?(' ', false, index)
            r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(' ')
            r9 = nil
          end
          if r9
            s8 << r9
          else
            break
          end
        end
        r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
        s6 << r8
        if r8
          r10 = _nt_expression
          s6 << r10
          if r10
            if has_terminal?(')', false, index)
              r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(')')
              r11 = nil
            end
            s6 << r11
            if r11
              s12, i12 = [], index
              loop do
                if has_terminal?(' ', false, index)
                  r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(' ')
                  r13 = nil
                end
                if r13
                  s12 << r13
                else
                  break
                end
              end
              r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
              s6 << r12
            end
          end
        end
      end
      if s6.last
        r6 = instantiate_node(Parethesis,input, i6...index, s6)
        r6.extend(Term1)
      else
        @index = i6
        r6 = nil
      end
      if r6
        r0 = r6
      else
        r14 = _nt_atom
        if r14
          r0 = r14
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:term][start_index] = r0

    r0
  end

  module Atom0
    def name
      elements[0]
    end

    def cond
      elements[2]
    end

    def value
      elements[4]
    end

  end

  module Atom1
    def name
      elements[0]
    end

    def cond
      elements[2]
    end

    def value
      elements[4]
    end

  end

  module Atom2
    def name
      elements[0]
    end

  end

  def _nt_atom
    start_index = index
    if node_cache[:atom].has_key?(index)
      cached = node_cache[:atom][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('$', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('$')
      r2 = nil
    end
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        if has_terminal?(' ', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(' ')
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s1 << r3
      if r3
        i5 = index
        if has_terminal?('~', false, index)
          r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('~')
          r6 = nil
        end
        if r6
          r5 = r6
        else
          if has_terminal?('=', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('=')
            r7 = nil
          end
          if r7
            r5 = r7
          else
            if has_terminal?('>', false, index)
              r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('>')
              r8 = nil
            end
            if r8
              r5 = r8
            else
              @index = i5
              r5 = nil
            end
          end
        end
        s1 << r5
        if r5
          s9, i9 = [], index
          loop do
            if has_terminal?(' ', false, index)
              r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(' ')
              r10 = nil
            end
            if r10
              s9 << r10
            else
              break
            end
          end
          r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
          s1 << r9
          if r9
            r11 = _nt_value
            s1 << r11
            if r11
              s12, i12 = [], index
              loop do
                if has_terminal?(' ', false, index)
                  r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(' ')
                  r13 = nil
                end
                if r13
                  s12 << r13
                else
                  break
                end
              end
              r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
              s1 << r12
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(Content,input, i1...index, s1)
      r1.extend(Atom0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i14, s14 = index, []
      s15, i15 = [], index
      loop do
        if has_terminal?('\G[^ !&|\\-<>()]', true, index)
          r16 = true
          @index += 1
        else
          r16 = nil
        end
        if r16
          s15 << r16
        else
          break
        end
      end
      if s15.empty?
        @index = i15
        r15 = nil
      else
        r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
      end
      s14 << r15
      if r15
        s17, i17 = [], index
        loop do
          if has_terminal?(' ', false, index)
            r18 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(' ')
            r18 = nil
          end
          if r18
            s17 << r18
          else
            break
          end
        end
        r17 = instantiate_node(SyntaxNode,input, i17...index, s17)
        s14 << r17
        if r17
          i19 = index
          if has_terminal?('<', false, index)
            r20 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('<')
            r20 = nil
          end
          if r20
            r19 = r20
          else
            if has_terminal?('=', false, index)
              r21 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('=')
              r21 = nil
            end
            if r21
              r19 = r21
            else
              if has_terminal?('>', false, index)
                r22 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('>')
                r22 = nil
              end
              if r22
                r19 = r22
              else
                if has_terminal?('~', false, index)
                  r23 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure('~')
                  r23 = nil
                end
                if r23
                  r19 = r23
                else
                  @index = i19
                  r19 = nil
                end
              end
            end
          end
          s14 << r19
          if r19
            s24, i24 = [], index
            loop do
              if has_terminal?(' ', false, index)
                r25 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(' ')
                r25 = nil
              end
              if r25
                s24 << r25
              else
                break
              end
            end
            r24 = instantiate_node(SyntaxNode,input, i24...index, s24)
            s14 << r24
            if r24
              r26 = _nt_value
              s14 << r26
              if r26
                s27, i27 = [], index
                loop do
                  if has_terminal?(' ', false, index)
                    r28 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(' ')
                    r28 = nil
                  end
                  if r28
                    s27 << r28
                  else
                    break
                  end
                end
                r27 = instantiate_node(SyntaxNode,input, i27...index, s27)
                s14 << r27
              end
            end
          end
        end
      end
      if s14.last
        r14 = instantiate_node(Stat,input, i14...index, s14)
        r14.extend(Atom1)
      else
        @index = i14
        r14 = nil
      end
      if r14
        r0 = r14
      else
        i29, s29 = index, []
        s30, i30 = [], index
        loop do
          if has_terminal?('\G[^ !&|\\-<>()]', true, index)
            r31 = true
            @index += 1
          else
            r31 = nil
          end
          if r31
            s30 << r31
          else
            break
          end
        end
        if s30.empty?
          @index = i30
          r30 = nil
        else
          r30 = instantiate_node(SyntaxNode,input, i30...index, s30)
        end
        s29 << r30
        if r30
          s32, i32 = [], index
          loop do
            if has_terminal?(' ', false, index)
              r33 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(' ')
              r33 = nil
            end
            if r33
              s32 << r33
            else
              break
            end
          end
          r32 = instantiate_node(SyntaxNode,input, i32...index, s32)
          s29 << r32
        end
        if s29.last
          r29 = instantiate_node(Atom,input, i29...index, s29)
          r29.extend(Atom2)
        else
          @index = i29
          r29 = nil
        end
        if r29
          r0 = r29
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:atom][start_index] = r0

    r0
  end

  module Value0
    def c
      elements[1]
    end

  end

  module Value1
    def text_value
      c.text_value
    end
  end

  def _nt_value
    start_index = index
    if node_cache[:value].has_key?(index)
      cached = node_cache[:value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('"', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('"')
      r2 = nil
    end
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        if has_terminal?('\G[^"]', true, index)
          r4 = true
          @index += 1
        else
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
      if r3
        if has_terminal?('"', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('"')
          r5 = nil
        end
        s1 << r5
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Value0)
      r1.extend(Value1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      s6, i6 = [], index
      loop do
        if has_terminal?('\G[^ ]', true, index)
          r7 = true
          @index += 1
        else
          r7 = nil
        end
        if r7
          s6 << r7
        else
          break
        end
      end
      if s6.empty?
        @index = i6
        r6 = nil
      else
        r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
      end
      if r6
        r0 = r6
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:value][start_index] = r0

    r0
  end

end

class ValidateParser < Treetop::Runtime::CompiledParser
  include Validate
end


